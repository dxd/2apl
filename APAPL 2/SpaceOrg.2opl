Facts:
norm(
    return_to_start(Thing),
    Thing, // the subject agent
    ( at(3,3,Thing), not(garbage(Thing)), clock(Now), Deadline is Now+120 ), // precondition
    obligation([at(1,1,Thing)],Deadline,[reduce_health(Thing)]) // obligation format
    ).

norm(
    avoid_eight_five(Thing),
    Thing, // the subject agent
    ( at(5,5,Thing), not(garbage(Thing))), // precondition
    prohibition([at(8,5,Thing)],[reduce_health(Thing)]) // prohibition format
    ).

at(X,Y,Object):-
   @external(envJavaSpace,readIfExists(tuple(null,point(X,Y),null),0),tuple(Object,point(X,Y),_)).

time_past(Time):- clock(Now), Now > Time.

garbage(dirt).
garbage(plastic).

make_plastic(X,Y):-
   @external(envJavaSpace,write(tuple(plastic,point(X,Y),100),-1),_).

notifyAgent(Agent,Event):-
   @external(envJavaSpace,notifyAgent(Agent,Event),_).

do_sanction([not(H)|T]):- retract(H),do_sanction(T).
do_sanction([H|T]):- uniqueassertz(H),do_sanction(T).
do_sanction([]).

do_reduce_health(Agent):- 
   @external(envJavaSpace,takeIfExists(tuple(Agent,null,null),0),tuple(Agent,point(X,Y),Health)),
   NewHealth is Health - 10,
   @external(envJavaSpace,write(tuple(Agent,point(X,Y),NewHealth),-1),_).

listTrue([H|T]):- H, listTrue(T).
listTrue([]).

Effects:
{true} tuple_space_changed {true} // causes compliance checking

Temporal norms:
agent_directed(Label,Agent,obligation(ListA,Deadline,Sanction)): 
	[norm(Label,Agent,Pre,obligation(ListA,Deadline,Sanction)) and Pre, 
	O(listTrue(ListA)), 
	time_past(Deadline)]

agent_directed(Label,Agent,prohibition(ListA,Sanction)): 
	[norm(Label,Agent,Pre,prohibition(ListA,Sanction)) and Pre, 
	F(listTrue(ListA)), 
	false]

Sanction rules:
reduce_health(Agent) and do_reduce_health(Agent) and notifyAgent(Agent,changed(status)) => not reduce_health(Agent).

viol(agent_directed(Label,Agent,prohibition(State,Sanction))), do_sanction(Sanction)  => not viol(agent_directed(Label,Agent,prohibition(State,Sanction))).
obey(agent_directed(Label,Agent,Deontic)) => not obey(agent_directed(Label,Agent,Deontic)).
