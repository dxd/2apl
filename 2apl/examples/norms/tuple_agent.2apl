BeliefUpdates:
  { position(X,Y) and points(H) } UpdateStatus(NewX,NewY,NewPoints) { not position(X,Y), position(NewX,NewY), not points(H), points(NewPoints) }
  { clock(Old) } UpdateClock(New) { not clock(Old), clock(New) }

Beliefs:   
  raise(X,NewX):- NewX is X + 1.
  lower(X,NewX):- NewX is X - 1.
  points(1000).
  position(1,1).
  clock(0).
  
Goals:
  at(3,3) :: 200 >> 7, at(6,6) :: 200 >> 5
 

PG-rules:

at(X,Y) <- true | {

   [moveTo(X,Y); 
    dropgoal(at(X,Y))]
    
} : 150

PC-rules:

///////////// Moving
moveTo(X,Y) <- position(X2,Y2) and X2 < X and raise(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and X2 > X and lower(X2,NewX) | { 
    updatePos(NewX,Y2); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and Y2 < Y and raise(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X2,Y2) and Y2 > Y and lower(Y2,NewY) | { 
    updatePos(X2,NewY); moveTo(X,Y)
}
moveTo(X,Y) <- position(X,Y) | { skip }

updatePos(NewX,NewY) <- position(X,Y) | {
    B(points(Points));
    @space(clock(),R);
    B(R=[actionresult(Clock)]);
    UpdateClock(Clock);
    UpdateStatus(NewX,NewY,Points);
    //@space(take(status(position(X,Y),Health),0),_);
    @space(write(status(position(NewX,NewY),Clock),-1),_)
} 

event(obligation(Goal,Deadline,Sanction),space) <- true | {
   adoptObligation(Goal, Deadline, Sanction)
}

event(prohibition(State,Sanction),space) <- true | {
    aprohibition(State,Sanction)
}


aprohibition(at(X,Y,_), reduce_200(_)) <- true | {
    adoptprohibition(position(X,Y) -> reduce_200)
}

adoptObligation(at(X,Y,_), D, reduce_100(_)) <- true | {
    adopta(at(X,Y) : D -> reduce_100)
}

Prohibitions:
	position(3,3) -> reduce_100
	
Sanctions:
	reduce_100 -> 3, reduce_200 -> 5
